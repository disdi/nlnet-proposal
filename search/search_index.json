{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nlnet Proposals # Nlnet Proposals for Librecar Control Project . 2023 2024","title":"Nlnet Proposals"},{"location":"#nlnet-proposals","text":"Nlnet Proposals for Librecar Control Project . 2023 2024","title":"Nlnet Proposals"},{"location":"2023/","text":"2023 # 2023 proposal 2023 Milestones Achievements of 2023 : Integrate opensource CAN-Bus (Controller Area Network) IP in FPGA. Tested opensource CAN-Bus with industrial and automotive devices to prove its usability in real world. Provide documentation how to integrate it in new FPGA based products.","title":"2023"},{"location":"2023/#2023","text":"2023 proposal 2023 Milestones Achievements of 2023 : Integrate opensource CAN-Bus (Controller Area Network) IP in FPGA. Tested opensource CAN-Bus with industrial and automotive devices to prove its usability in real world. Provide documentation how to integrate it in new FPGA based products.","title":"2023"},{"location":"2024-proposal/2024/","text":"Proposal : OpenBSW support for Librecar # Project Overview # To democratize knowledge of inside of automotive vehicle, the importance of Open Source for Automotive is growing. The automotive domain needs to take a leap from a closed, IP-protected approch to a collaborative approach. The automotive industry is experiencing a paradigm shift where software has become the primary differentiator in modern vehicles. OpenBSW, a new open-source project within the Eclipse community, aims to change automotive software development by providing an open-source, flexible, and scalable software platform for automotive microcontrollers. LibreCar Control was funded by Nlnet in 2023 which provided an openhardware for running automotive software. As part of 2024, we propose to port OpenBSW to open hardware ecosystem of Librecar which includes Litex and its opensource IP cores and peripheral buses like CAN and Ethernet. ... 2024 Project Plans # CAN support was added to Litex in 2023 funding round. However from SW side, only basic support over Linux was added. By integrating OpenBSW in Litex we would get a streamlined interface for sending and receiving CAN frames with interface to filter, listener and detachment modules. The OS abstraction layer with built-in async mechanisms would add CAN support for both Zephyr RTOS and Linux . Target Consumers # This effort will help the opensource community in following ways: Access to an opensource CAN-Bus IP and its drivers and standard applications used in automotive ecosytem. Provding software developers a fully accessible hardware and software over CAN-Bus thus reducing barrier of entry for new developers ...","title":"Proposal : OpenBSW support for Librecar"},{"location":"2024-proposal/2024/#proposal--openbsw-support-for-librecar","text":"","title":"Proposal : OpenBSW support for Librecar"},{"location":"2024-proposal/2024/#project-overview","text":"To democratize knowledge of inside of automotive vehicle, the importance of Open Source for Automotive is growing. The automotive domain needs to take a leap from a closed, IP-protected approch to a collaborative approach. The automotive industry is experiencing a paradigm shift where software has become the primary differentiator in modern vehicles. OpenBSW, a new open-source project within the Eclipse community, aims to change automotive software development by providing an open-source, flexible, and scalable software platform for automotive microcontrollers. LibreCar Control was funded by Nlnet in 2023 which provided an openhardware for running automotive software. As part of 2024, we propose to port OpenBSW to open hardware ecosystem of Librecar which includes Litex and its opensource IP cores and peripheral buses like CAN and Ethernet. ...","title":"Project Overview"},{"location":"2024-proposal/2024/#2024-project-plans","text":"CAN support was added to Litex in 2023 funding round. However from SW side, only basic support over Linux was added. By integrating OpenBSW in Litex we would get a streamlined interface for sending and receiving CAN frames with interface to filter, listener and detachment modules. The OS abstraction layer with built-in async mechanisms would add CAN support for both Zephyr RTOS and Linux .","title":"2024 Project Plans"},{"location":"2024-proposal/2024/#target-consumers","text":"This effort will help the opensource community in following ways: Access to an opensource CAN-Bus IP and its drivers and standard applications used in automotive ecosytem. Provding software developers a fully accessible hardware and software over CAN-Bus thus reducing barrier of entry for new developers ...","title":"Target Consumers"},{"location":"2024-proposal/roadmap/","text":"2024 Roadmap # Project Roadmap # Total Estimated Duration: Duration of the whole project would be approximately 6 to 7 months. Total Costs: Requested amount in Euro for the whole project is 50,000 Euros. Milestone 1 \u2014 OS abstraction layer setup # Estimated duration: 2 months Costs: 20,000 Euros Tasks: This process starts with the common OS abstraction layer setup over Litex which can support CAN driver over both Linux and Zephyr. Specfic details of features planned are listed below : Cross-Platform CAN Hardware Abstraction # Hardware Abstraction Layer (HAL) # Unified API for CAN controller access Platform-independent driver interface Support for CTUCAN controller in Litex Standardized register access methods Linux to Zephyr RTOS Porting # Device Tree Adaptation # Conversion of Linux DTS CAN nodes to Zephyr format Mapping of pin configurations and controller properties Clock and timing parameter translation Interrupt handling configuration Driver Architecture # Separation of platform-specific and common code # Implementation of Zephyr driver API callbacks # can_configure() for bitrate and timing settings can_send() for message transmission can_add_rx_filter() for message filtering can_remove_rx_filter() for filter management Resource Management # Memory allocation strategy adaptation DMA configuration differences Buffer management optimization Interrupt priority mapping Power Management # Sleep mode configuration Wake-up source handling Power state transitions Low-power mode optimization Error Handling # Bus-off recovery procedures Error status reporting Fault containment mechanisms Error counter management ... Milestone 2 \u2014 Standard programming constructs over CAN # Estimated Duration: 2 months Costs: 20,000 Euros Tasks: Basic CAN communication over Linux, is already supported in Litex. We would enhance it by adding a streamlined interface for sending/receiving CAN frames and a Code-based listener attachment and detachment system. Specfic details of features planned are listed below : Message Handling Framework # Dynamic frame registration and deregistration Priority-based message queuing Automatic message scheduling for cyclic transmissions Event-Driven Architecture # Lightweight listener pattern implementation Multiple callback support per CAN ID Configurable filtering mechanisms Zero-copy message handling for optimal performance Error Management # Sophisticated error detection and handling Bus-off recovery mechanisms Automatic retransmission configuration Error statistics and logging Configuration Features # Bit timing configuration Acceptance filtering setup Transmission buffer management Bus load monitoring ... Milestone 3 \u2014 Diagnostics over CAN # Estimated Duration: 2 months Costs: 10,000 Euros Tasks: The next steps on our roadmap include Diagnostics over CAN bus supporting flashing via Unified Diagnostic Services (UDS). Diagnostic Support # Built-in support for UDS (Unified Diagnostic Services) ISO-TP (ISO 15765-2) protocol implementation Multiple addressing modes (physical, functional, extended) Response pending handling ...","title":"2024 Roadmap"},{"location":"2024-proposal/roadmap/#2024-roadmap","text":"","title":"2024 Roadmap"},{"location":"2024-proposal/roadmap/#project-roadmap","text":"Total Estimated Duration: Duration of the whole project would be approximately 6 to 7 months. Total Costs: Requested amount in Euro for the whole project is 50,000 Euros.","title":"Project Roadmap"},{"location":"2024-proposal/roadmap/#milestone-1--os-abstraction-layer-setup","text":"Estimated duration: 2 months Costs: 20,000 Euros Tasks: This process starts with the common OS abstraction layer setup over Litex which can support CAN driver over both Linux and Zephyr. Specfic details of features planned are listed below :","title":"Milestone 1 \u2014 OS abstraction layer setup"},{"location":"2024-proposal/roadmap/#cross-platform-can-hardware-abstraction","text":"","title":"Cross-Platform CAN Hardware Abstraction"},{"location":"2024-proposal/roadmap/#hardware-abstraction-layer-hal","text":"Unified API for CAN controller access Platform-independent driver interface Support for CTUCAN controller in Litex Standardized register access methods","title":"Hardware Abstraction Layer (HAL)"},{"location":"2024-proposal/roadmap/#linux-to-zephyr-rtos-porting","text":"","title":"Linux to Zephyr RTOS Porting"},{"location":"2024-proposal/roadmap/#device-tree-adaptation","text":"Conversion of Linux DTS CAN nodes to Zephyr format Mapping of pin configurations and controller properties Clock and timing parameter translation Interrupt handling configuration","title":"Device Tree Adaptation"},{"location":"2024-proposal/roadmap/#driver-architecture","text":"","title":"Driver Architecture"},{"location":"2024-proposal/roadmap/#separation-of-platform-specific-and-common-code","text":"","title":"Separation of platform-specific and common code"},{"location":"2024-proposal/roadmap/#implementation-of-zephyr-driver-api-callbacks","text":"can_configure() for bitrate and timing settings can_send() for message transmission can_add_rx_filter() for message filtering can_remove_rx_filter() for filter management","title":"Implementation of Zephyr driver API callbacks"},{"location":"2024-proposal/roadmap/#resource-management","text":"Memory allocation strategy adaptation DMA configuration differences Buffer management optimization Interrupt priority mapping","title":"Resource Management"},{"location":"2024-proposal/roadmap/#power-management","text":"Sleep mode configuration Wake-up source handling Power state transitions Low-power mode optimization","title":"Power Management"},{"location":"2024-proposal/roadmap/#error-handling","text":"Bus-off recovery procedures Error status reporting Fault containment mechanisms Error counter management ...","title":"Error Handling"},{"location":"2024-proposal/roadmap/#milestone-2--standard-programming-constructs-over-can","text":"Estimated Duration: 2 months Costs: 20,000 Euros Tasks: Basic CAN communication over Linux, is already supported in Litex. We would enhance it by adding a streamlined interface for sending/receiving CAN frames and a Code-based listener attachment and detachment system. Specfic details of features planned are listed below :","title":"Milestone 2 \u2014 Standard programming constructs over CAN"},{"location":"2024-proposal/roadmap/#message-handling-framework","text":"Dynamic frame registration and deregistration Priority-based message queuing Automatic message scheduling for cyclic transmissions","title":"Message Handling Framework"},{"location":"2024-proposal/roadmap/#event-driven-architecture","text":"Lightweight listener pattern implementation Multiple callback support per CAN ID Configurable filtering mechanisms Zero-copy message handling for optimal performance","title":"Event-Driven Architecture"},{"location":"2024-proposal/roadmap/#error-management","text":"Sophisticated error detection and handling Bus-off recovery mechanisms Automatic retransmission configuration Error statistics and logging","title":"Error Management"},{"location":"2024-proposal/roadmap/#configuration-features","text":"Bit timing configuration Acceptance filtering setup Transmission buffer management Bus load monitoring ...","title":"Configuration Features"},{"location":"2024-proposal/roadmap/#milestone-3--diagnostics-over-can","text":"Estimated Duration: 2 months Costs: 10,000 Euros Tasks: The next steps on our roadmap include Diagnostics over CAN bus supporting flashing via Unified Diagnostic Services (UDS).","title":"Milestone 3 \u2014 Diagnostics over CAN"},{"location":"2024-proposal/roadmap/#diagnostic-support","text":"Built-in support for UDS (Unified Diagnostic Services) ISO-TP (ISO 15765-2) protocol implementation Multiple addressing modes (physical, functional, extended) Response pending handling ...","title":"Diagnostic Support"}]}